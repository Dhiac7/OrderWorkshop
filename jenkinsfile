pipeline {
    agent any

    // Trigger pipeline on GitHub push
    triggers {
        githubPush()
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        // Will be set after checkout
        GIT_BRANCH_NAME = ''
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "üîÑ Checking out repository..."

                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/dhia']], // Target branch
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'CleanBeforeCheckout']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/Dhiac7/OrderWorkshop.git',
                            credentialsId: 'gitlink' // Make sure this exists in Jenkins
                        ]]
                    ])

                    // Detect branch even in detached HEAD
                    env.GIT_BRANCH_NAME = sh(
                        script: "git symbolic-ref --short HEAD || echo dhia",
                        returnStdout: true
                    ).trim()

                    echo "üì¶ Checked out branch: ${env.GIT_BRANCH_NAME}"
                }
            }
        }

        stage('Build') {
            when {
                expression { env.GIT_BRANCH_NAME == 'dhia' }
            }
            steps {
                echo "üöÄ Building on branch: ${env.GIT_BRANCH_NAME}"
                // Add your actual build commands here
                // e.g., sh './mvnw clean package'
            }
        }

        stage('Test') {
            steps {
                echo "üß™ Running tests on branch: ${env.GIT_BRANCH_NAME}"
                // Add your test commands here
                // e.g., sh './mvnw test'
            }
        }
    }

    post {
        success {
            mail to: 'meddhiac03@gmail.com',
                 subject: "‚úÖ SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: """\
‚úÖ The build was successful!

Branch: ${env.GIT_BRANCH_NAME}
Job: ${env.JOB_NAME}
Build Number: ${env.BUILD_NUMBER}
View build: ${env.BUILD_URL}
"""
        }
        failure {
            mail to: 'meddhiac03@gmail.com',
                 subject: "‚ùå FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: """\
‚ùå The build failed.

Branch: ${env.GIT_BRANCH_NAME}
Job: ${env.JOB_NAME}
Build Number: ${env.BUILD_NUMBER}
View build: ${env.BUILD_URL}
"""
        }
    }
}
