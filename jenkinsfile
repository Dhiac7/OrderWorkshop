pipeline {
    agent any

    tools {
        jdk 'jdk-22'
        maven 'maven_3.6.3'
    }
    
    environment {
    DOCKERHUB_CREDENTIALS = "dockerhub-credentials"
    DOCKER_IMAGE = "rayensebai/order_project"
    KUBECONFIG = '/var/lib/jenkins/.kube/config'
    }

    stages {
        stage('GIT') {
            steps {
                git branch: 'rayen', changelog: false, poll: false, url: 'https://github.com/Dhiac7/OrderWorkshop.git'
            }
        }

        stage('Maven_build') {
            steps {
                sh "mvn clean compile -Dskiptest=true"
            }
        }

        stage('MVN SONARQUBE') {
            steps {
                script {
                    withSonarQubeEnv("sonarqube") {
                    sh 'mvn sonar:sonar'
                    }
                }
            }
        }
        
         stage('Test Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
                }
            }
        }
        
        
        stage('Build Docker Image') {
            steps {
                sh "docker build -t $DOCKER_IMAGE:${BUILD_NUMBER} ."
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker tag $DOCKER_IMAGE:${BUILD_NUMBER} $DOCKER_IMAGE:latest
                        docker push $DOCKER_IMAGE:${BUILD_NUMBER}
                        docker push $DOCKER_IMAGE:latest
                        """
                    }
                }
            }
        }

        stage('Deploy Containers') {
            steps {
                sh 'docker compose down || true'
                sh 'docker compose up -d --build'
            }
        }
        
        stage('Kubernetes') {
            steps {
                sh '''
                    kubectl apply -f mysql-deployment.yaml
                    kubectl apply -f app-deployment.yaml
                    '''
                
            }
        }
        
    }
    
    post {
        always {
            sh 'docker system prune -f'
        }
        
        success {
            emailext(
                subject: "✅ SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """
                <p>The Jenkins job <b>${env.JOB_NAME}</b> completed successfully!</p>
                <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                """,
                to: 'rayen.sebai07@gmail.com'
            )
        }
        failure {
            emailext(
                subject: "❌ FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """
                <p>The Jenkins job <b>${env.JOB_NAME}</b> has failed.</p>
                <p>Check console output: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                """,
                to: 'rayen.sebai07@gmail.com'
            )
        }

        
    }
}
